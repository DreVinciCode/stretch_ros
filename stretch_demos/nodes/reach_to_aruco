#!/usr/bin/env python3

import time
import copy
import rospy
import numpy as np
import hello_helpers.hello_misc as hm
from tf2_ros import StaticTransformBroadcaster

from std_srvs.srv import Trigger, TriggerResponse
from std_srvs.srv import SetBool, SetBoolResponse
from visualization_msgs.msg import MarkerArray
from sensor_msgs.msg import JointState
from geometry_msgs.msg import TransformStamped, PointStamped


class ReachToMarkerNode(hm.HelloNode):
    def __init__(self):
        hm.HelloNode.__init__(self)
        self.configuration = None
        self.grasp_q = None
        self.pregrasp_q = None
        # lift_first=True, the lift joint gets to move first
        # lift_first=False, the lift joint moves last
        self.lift_first = None

    def mark_lift_first_callback(self, request):
        did_success = True
        error_msg = ''

        self.lift_first = request.data

        return SetBoolResponse(
            success=did_success,
            message=error_msg
        )

    def move_to_grasp_callback(self, request):
        did_success = False
        error_msg = "missing valid grasp_q"

        if self.grasp_q:
            local_grasp_q = copy.copy(self.grasp_q)
            self.move_to_pose(local_grasp_q)
            self.move_to_pose({'joint_gripper_finger_left': -0.3})
            did_success = True
            error_msg = ""

        return TriggerResponse(
            success=did_success,
            message=error_msg
        )

    def move_to_pregrasp_callback(self, request):
        did_success = False
        error_msg = "missing valid pregrasp_q or lift_first"

        if self.pregrasp_q and self.lift_first:
            # pregrasp_q = {'joint_arm': 0.08000198142407276, 'joint_lift': 0.9314760639101932, 'joint_wrist_yaw': 2.8487301548359594, 'joint_wrist_pitch': -0.6488738732756262, 'joint_wrist_roll': -0.26231071472844464}
            local_pregrasp_q = copy.copy(self.pregrasp_q)
            lift_command = {'joint_lift': local_pregrasp_q.pop('joint_lift')}
            if self.lift_first:
                self.move_to_pose(lift_command)
                self.move_to_pose(local_pregrasp_q)
            else:
                self.move_to_pose(local_pregrasp_q)
                self.move_to_pose(lift_command)
            self.move_to_pose({'joint_gripper_finger_left': 0.6})
            did_success = True
            error_msg = ""

        return TriggerResponse(
            success=did_success,
            message=error_msg
        )

    def save_current_q_as_pregrasp_callback(self, request):
        rospy.loginfo('received save_current_q_as_pregrasp call')
        self.pregrasp_q = copy.copy(self.configuration)
        return TriggerResponse(
            success=True,
            message=""
        )

    def save_current_q_as_grasp_callback(self, request):
        rospy.loginfo('received save_current_q_as_grasp call')
        self.grasp_q = copy.copy(self.configuration)
        return TriggerResponse(
            success=True,
            message=""
        )

    def joint_states_callback(self, joint_state):
        rospy.logdebug("Jointstate callback received: ")
        joint_arm_index = joint_state.name.index('joint_arm')
        joint_lift_index = joint_state.name.index('joint_lift')
        joint_wrist_yaw_index = joint_state.name.index('joint_wrist_yaw')
        joint_wrist_pitch_index = joint_state.name.index('joint_wrist_pitch')
        joint_wrist_roll_index = joint_state.name.index('joint_wrist_roll')
        self.configuration = {
            'joint_arm': joint_state.position[joint_arm_index],
            'joint_lift': joint_state.position[joint_lift_index],
            'joint_wrist_yaw': joint_state.position[joint_wrist_yaw_index],
            'joint_wrist_pitch': joint_state.position[joint_wrist_pitch_index],
            'joint_wrist_roll': joint_state.position[joint_wrist_roll_index],
        }
        rospy.logdebug(self.configuration)

    def main(self):
        hm.HelloNode.main(self, 'reach_to_marker_node', 'reach_to_marker_node', wait_for_first_pointcloud=False)

        rospy.Subscriber('/stretch/joint_states', JointState, self.joint_states_callback)
        rospy.Service('/save_current_q_as_pregrasp', Trigger, self.save_current_q_as_pregrasp_callback)
        rospy.Service('/save_current_q_as_grasp', Trigger, self.save_current_q_as_grasp_callback)
        rospy.Service('/move_to_pregrasp', Trigger, self.move_to_pregrasp_callback)
        rospy.Service('/move_to_grasp', Trigger, self.move_to_grasp_callback)
        rospy.Service('/mark_lift_first', SetBool, self.mark_lift_first_callback)

        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            rate.sleep()


if __name__ == "__main__":
    node = ReachToMarkerNode()
    node.main()
